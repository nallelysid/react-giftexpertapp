{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifts.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifts","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifts","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAiB9C,OACI,sBAAMC,SAXU,SAACC,GAEjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAnBc,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAQF,GAFP,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAIFC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAebM,GAfa,4CAAH,sDCERO,EAAe,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAY,uBAAjB,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,kCAAKA,EAAL,WCACO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACfd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH4B,mBAClCC,EADkC,KAC3BC,EAD2B,KAuBzC,OAjBAC,qBAAY,WACPxB,EAASC,GAAUwB,MACb,SAAAC,GAGKH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAKEqB,EDnBwBK,CAAe1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAmDhB,IAClDoB,GAAW,8CAEZ,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEfzBgB,EAAgB,WAAM,MAEKzC,mBAAS,CAAC,cAFf,mBAExB0C,EAFwB,KAEZ3C,EAFY,KAY/B,OACI,gCACI,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACX,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCtB/B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0bbe7490.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [InputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit= (e) => {\r\n        //Previene comportamiento por defecto del fomulario\r\n        e.preventDefault();\r\n        \r\n        if( InputValue.trim().length > 2){\r\n            setCategories( cats => [InputValue, ...cats ]);//Como primer argumento recibe el etado anterior, y en el callback el nuevo estado\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (        \r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value = {InputValue} \r\n                onChange = { handleInputChange }\r\n                \r\n            />            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n    ","export const getGifts = async (category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=vozIfT7u1N52dhQOkE4RkJgBzJY6CZwh`;\r\n    const resp = await fetch ( url );\r\n    const { data}  = await resp.json();\r\n\r\n    \r\n\r\n    const gifts = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n        \r\n    });\r\n    return gifts;\r\n    \r\n}\r\n","import React from 'react'\r\n\r\nexport const GiftGridItem = ( {title, url} ) => {\r\n    \r\n    return (\r\n        <div className = \"card animate__fadeIn\">\r\n            <img src= {url} alt={ title }/>\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","//rafc\r\nimport React from 'react'\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\n//{ useState, useEffect }\r\n\r\nimport { GiftGridItem } from './GiftGridItem';\r\n\r\nexport const GiftGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifts( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__flash\">{ category }</h3>   \r\n            {loading && <p>'Cargando...'</p>}\r\n      \r\n            <div className=\"card-gift\">\r\n                        \r\n                {\r\n                    images.map( img => (\r\n                        <GiftGridItem \r\n                            key= {img.id} \r\n                            { ...img } \r\n                        />\r\n                    ))                \r\n                }            \r\n            </div> \r\n        </>\r\n    )\r\n}\r\n    ","import { useState, useEffect} from 'react'\r\nimport { getGifts } from '../helpers/getGifts';\r\n//Es un hook, que no es mas que funciones\r\n//rafc\r\n//Los hooks pueden tener un estado, podian indicar a los componentes cuando tienen que renderizar\r\nexport const useFetchGifts = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect ( () =>{         \r\n         getGifts(category).then\r\n             ( imgs =>{\r\n\r\n                //setTimeout ( () => {\r\n                    setstate({\r\n                     data: imgs,\r\n                     loading: false\r\n                 });\r\n                //}, 3000);\r\n                 \r\n             })\r\n     }, [category]); // El segundo parametro es un arreglo de dependencias\r\n                     //Si la ctegoria cambia vuelve a ejecutar este efecto\r\n\r\n    \r\n\r\n    return state;\r\n}\r\n","//rafc  -- snipped\r\n\r\nimport React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GiftGrid } from './components/GiftGrid'\r\n\r\nexport const GiftExpertApp = () => {\r\n    // const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    //const handleAdd = () =>{\r\n        //var cat = categories.slice();\r\n        //cat.push('hello');\r\n        //setCategories(cat);\r\n        //setCategories( ['HunterXHunter', ...categories]); //Copio el arreglo y agrego una nueva\r\n        //setCategories( cats => [...cats, 'HunterXHunter']); //Como primer argumento recibe el etado anterior, y en el callback el nuevo estado\r\n    //}\r\n\r\n    return (\r\n        <div>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr />\r\n            \r\n            <ol>\r\n                { \r\n                    categories.map( (category) =>\r\n                         <GiftGrid \r\n                         key={ category }\r\n                         category={ category } />\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}